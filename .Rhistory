dhyper(x = 1, m = 11, n = 6, k = 3)
#P(X=0)
#a=6     N=14
hyper =
dhyper(x = 0, m = 3, n = 6, k = 14)
#P(X=0)
#a=6     N=14
hyper =
dhyper(x = 0, m = 3, n = 6, k = 8)
dhyper(x = 0, m = 3, n = 6, k = 8)
#P(X=0)
#a=6     N=20    n=3
hyper =
dhyper(x = 0, m = 3, n = 6, k = 20)
#P(X=0)
#a=6     N=20    n=3
hyper = 91/(15*19)
91/(15*19)
6*14+3*6
(6*14+3*6)/20
(6*14+3*6)/3
c(6,0)*c(14,3)
(c(6,0)*c(14,3))/c(20,3)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstilling
6*14
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, N=8)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, N=1)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=20)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=8)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=12)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=20)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=20) ???
#Exersice 2.5 Hay delivery Quality
#man får 20 baller hø og tjekker kvaliteten på 3 af ballerne.
#Man forventer at 20 af ballerne er dårlige
#X beskriver antal af inficerede baller hø blandt de 3 der tjekkes.
#(HYPERGEOMETRISK)
#a) gennemsnit, varians og P(X>=1)?
n = 3
a = 2
N = 20
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=20) ???
#Exersice 2.5 Hay delivery Quality
#man får 20 baller hø og tjekker kvaliteten på 3 af ballerne.
#Man forventer at 20 af ballerne er dårlige
#X beskriver antal af inficerede baller hø blandt de 3 der tjekkes.
#(HYPERGEOMETRISK)
#a) gennemsnit, varians og P(X>=1)?
n = 3
n = 3
a = 2
N = 20
mean = n*(a/N)
mean
varians = n*((a*(N-a))/N^2)*(N-n)/(N-1)
varians
#P(X=0)
dhyper(x=0, m=3, n=2, k=1)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=6, k=1)
#P(X=0)
1-dhyper(x=0, m=3, n=2, k=1)  #0.4
#P(X=0)
1-dhyper(x=0, m=3, n=2, k=3)  #0.4
#P(X=0)
1-dhyper(x=0, m=3, n=18, k=20)  #0.4
#P(X=0)
1-dhyper(x=0, m=3, n=2, k=20)  #0.4
#bruger nu binomialfordelingen hvor vi tager fra en infiti population
#b)
dbinom(0, size=10, prob=0.01)
pbinom(0, size=10, prob=0.01)
rbinom(0, size=10, prob=0.01)
pbinom(0, size=10, prob=0.1)
1-ppois(5, 1.6)
#b) hvad er sands. for at højst 8 ting vil nå kontrollen over 5 minutters periode?
1.6*5
#b) hvad er sands. for at højst 8 ting vil nå kontrollen over 5 minutters periode?
lambda=1.6*5
ppois(8, lambda)
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
1-ppois(19, 19/5)
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
1-ppois(19, 5)
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
1-ppois(20, 5)
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
1-ppois(19, 15)
#lambda er 15 fordi det er så mange gange
12*5
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
60/5
#a) hvad er sands. for at kapaciteten vil blive overstiget på 5 tilfældige minutter?
180/(60/5)
1-ppois(19, 15)
dpois(19, 15)
ppois(19, 15)
ppois(22, 15)
ppois(25, 15)
mean=3*6/20
3*6/20
3*((6*(20-6))/20^2)*(20-3)/19
quantile(brandG)
brandF = c(45,47,48,49,49,50,52,52,53,54)
brandG = c(48,48,49,49,52,54,54,55,55)
quantile(brandG)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=14, k=1)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=14, k=2)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=3, m=3, n=14, k=2)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=3, m=3, n=14, k=1)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=0, m=3, n=14, k=1)
#der er 32% chance for at trække en med uoverensstemmelse. se løsninger for at se ligningsopstillingen
dhyper(x=3, m=14, n=6, k=3)
#P(X=0)
1-dhyper(x=0, m=3, n=2, k=20)  #0.4
#P(X=0)
1-dhyper(x=0, m=2, n=18, k=3)  #0.4
#P(X=0)
1-phyper(x=0, m=2, n=18, k=3)  #0.4
#P(X=0)
1-dhyper(x=0, m=2, n=18, k=3)  #0.4
#P(X=0)
1-dhyper(x=0, m=2, n=18, k=3, lower.tail = FALSE)  #0.4
#P(X=0)
dhyper(x=0, m=2, n=18, k=3, lower.tail = FALSE)  #0.4
#P(X=0)
phyper(x=0, m=2, n=18, k=3, lower.tail = FALSE)  #0.4
#P(X=0)
phyper(q=0, m=2, n=18, k=3, lower.tail = FALSE)  #0.4
#P(X=0)
1-dhyper(x=0, m=2, n=18, k=3)  #0.4
#Beskriv følgende fordelinger og deres resultat:
pnorm(2)
pnorm(2,1,1)
pnorm(2,1,2)
#Beskriv følgende fordelinger og deres resultat:
pnorm(1) #0.977
#Beskriv følgende fordelinger og deres resultat:
pnorm(3) #0.977
#Beskriv følgende fordelinger og deres resultat:
pnorm(4) #0.977
#Beskriv følgende fordelinger og deres resultat:
pnorm(5) #0.977
#Beskriv følgende fordelinger og deres resultat:
pnorm(10) #0.977
#Beskriv følgende fordelinger og deres resultat:
pnorm(2) #0.977
plot(pnorm(2))
#B
#Hvad er følgende resultat?
qnorm(pnorm(2))
#C
#Hvad repræsenterer de følgende?
qnorm(0.75)
#C
#Hvad repræsenterer de følgende?
qnorm(0.975)
qnorm(0.975,1,1)
qnorm(0.975,1,2)
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.975))
curve(pnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.977))
curve(qnorm, xlim=c(-4,4))
curve(qnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.977))
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.977))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.9777))
#B
#Hvad er følgende resultat?
qnorm(pnorm(2)) #2
#A
#Beskriv følgende fordelinger og deres resultat:
pnorm(2) #0.977
pnorm(2,1,1) #0.841
pnorm(2,1,2) #0.691
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.9777))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.9841))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.841))
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.841))
#B
#Hvad er følgende resultat?
qnorm(pnorm(2)) #2
#C
#Hvad repræsenterer de følgende?
qnorm(0.975) #1.96
?qnorm
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.975))
#P(X=23.8)
?qnorm
#b)
#vi ved at mean er 24 og varians er 16, sd er da 4
#P(X<=20)
pnorm(20, 24, 4)
#P(X>29.5)
1-pnorm(29.5, 24, 4)
#A
#Beskriv følgende fordelinger og deres resultat:
pnorm(2) #0.977
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.841))
sd = 4-3
pnorm(10, 54, 3)
pnorm(10, 54, 9)
pnorm(10, 54, 3)
pnorm(10, 11, 5)
#b)#Hvad er sands. for at mean og sd for den totale tidsforbrug er 100 chips for den nye maskine
pnorm(100, 5400, 300)
#b)#Hvad er sands. for at mean og sd for den totale tidsforbrug er 100 chips for den nye maskine
pnorm(100, 5400, 900)
#b)#Hvad er sands. for at mean og sd for den totale tidsforbrug er 100 chips for den nye maskine
mean = 54*100
sd = 3*100
sd = sqrt(3*100)
sd = sqrt(100)*3
sqrt(100)*3
54*100
#a)
#Hvad vil den forventede fejl rate være?
1-pnorm(3007, 3000, 3)
pnorm(2993, 3000, 3)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
qnorm(0.99, 110, 2900)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
qnorm(0.99, 2900, 110)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
pnorm(2993, 2900, 110) + 1 - pnorm(3007,2900, 90)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
pnorm(2993, 2900, 90) + 1 - pnorm(3007,2900, 110)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
pnorm(2993, 3000, 90) + 1 - pnorm(3007,3000, 110)
#b)
#Hvor stor må sd være mellem bjælkerne hvis man vil have 99%?
pnorm(2993, 3000, 3) + 1 - pnorm(3007,3000, 3)
#se i løsningerne de er gode
sigma = 2.46
#a)
#Der er 8765.813 timer på et år, altså 17.531.63 halve timer
?ppois
mean = 110000/17532
ppois(17532, 110000)
dpois(17532, 110000)
110000/17532
#der er en sandsynlighed på 6.28% for at der er en seer på en given halv time
dpois(0, 6.28)
#b)
#hvad er sands for at du skal vente mere end
#15 minutter for næste seer, hvis der lige har været en?
kvarter = 17532*2
mean2 = 110000/17532*2
mean2 = 110000/(17532*2)
#hvad er snads. for at der ikke er nogle seer de næste 15 minutter
dpois(0, mean2)
rm(list=l)
rm(list=ls())
measure = c(3003, 3005, 2997, 3006, 2999, 2998, 3007, 3005, 3001)
measure = c(3003, 3005, 2997, 3006, 2999, 2998, 3007, 3005, 3001)
mu = 3000 #mm
#a) Calculate sample mean, sample sd og standard error of mean
mean(measure)
sd(measure)
#a) Calculate sample mean, sample sd og standard error of mean
mean = mean(measure) #=3002
sd = sd(measure) #3.708
#standard error SE is s/sqrt(n), s is sd and n is number of elements 9.
SE =sd/sqrt(mean)
#standard error SE is s/sqrt(n), s is sd and n is number of elements 9.
SE =sd/sqrt(length(measure))  #0.0
VY = 3*3.71
EY = 5*3000
VY = 3*3.71
VY = 3^2*3.71
VY = 5*3^2
1-pnorm(sum(measure), EY, VY^2)
2*(1-pnorm(sum(measure), EY, VY^2))
sum(measure)
VY = sqrt(5*3^2)
2*(1-pnorm(15010, EY, VY^2))
(1-pnorm(15010, EY, VY^2))
(1-pnorm(15010, EY, VY))
EY = 5*3000
VY = sqrt(5*3^2)
(1-pnorm(15010, EY, VY))
2*(1-pnorm(15010, EY, VY))
#c) Find the 95% confidence interval for the mean mu
n = 9
qchisq((p=c(0.025, 0.975), df=n-1))
qchisq(p=c(0.025, 0.975), df=n-1)
X1 = (8*sd^2)/2.1797
X2 = (8*sd^2)/17.535
X1 = (8*sd^2)/17.53
X2 = (8*sd^2)/2.1797
#f) Find the 99% confidence interval for the variance and the sd
qchisq(p=c(0.025/2, 0.995), df=n-1)
X11 = (8*sd^2)/1.8
X22 = (8*sd^2)/21.9
#c) Find the 95% confidence interval for the mean mu
qt = 0.975, n-1
#c) Find the 95% confidence interval for the mean mu
n = 9
qt(0.975, n-1)
t.test(measure)
qt(0.995, n-1) #2.3
t.test(measure)
qt(0.995, n-1) #
t.test(measure)
t.test(measure, conf-level=0.99)
t.test(measure, conf.level=0.99)
curve(dnorm, xlim=c(-4,4))
##vi ser at konfidens intervallet bliver større for 99%, da man ønsker at tage mere med af "grafen"
## så er man mere sikker på at den sande værdi ligger inden for intervallet.
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=dnorm(2.3))
#Vertical line at the 0.975 quantile
abline(v=dnorm(0.95))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.975)))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.975))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.95))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.995))
#Vertical line at the 0.975 quantile
abline(v=pnorm(0.995))
#Vertical line at the 0.975 quantile
abline(v=pnorm(2.3))
curve(dnorm, xlim=c(-4,4))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.975))
#Vertical line at the 0.975 quantile
abline(v=qnorm(0.995))
plot(t.test(measure,mu=63))
plot(t.test(measure))
plot(qt(0.995, n-1))
qt(0.995, n-1) #3.36 quantil, som bliver større da du bevæger dig længere væk fra midten
curve(t.test(measure)))
sqrt(6.3)
sqrt(50.5)
sqrt(5.02)
sqrt(61.11)
mean = 180.05
sd = 0.0959
X = c(180.02, 180, 180.01, 179.97, 179.92, 180.05, 179.94, 180.1, 180.24, 180.12, 180.13, 180.22, 179.96, 180.1, 179.96, 180.06)
n = 16
qt(0.95, n-1) #3.36 quantil, som bliver større da du bevæger dig længere væk fra midten
t.test(X, conf.level=0.90)
#b) 99% konfidens interval for sigma?
qchisq(p=c(0.995, 0.005), df=n-1)
X11 = (15*sd^2)/32.8
X22 = (15*sd^2)/4.6
sd^2
sqrt(0.004)
sqrt(0.03)
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
factor(0)
factor(0, 1)
factor(c(0, 1))
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
library(RColorBrewer)
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
install.packages("fresh")
library(fresh)
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
log(0)
?validate
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
rep("#5B779A", length(xColumn)
)
rep("#5B779A", length(c(1, 2, 3, 4)))
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
?summary
?coef
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
?glm
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
?type
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
library(plotly)
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
shiny::runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
library(readr)
?write_tsv
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp()
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
runApp('C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse')
# Load packages
library(tidyverse)
setwd("C:/Users/catdu/OneDrive/DTU/11. semester/SpecialCourse")
# Variable names
varNames <- c(V1 = "id",        V2 = "ccf",       V3 = "age",       V4 = "sex",
V5 = "painloc",   V6 = "painexer",  V7 = "relrest",   V8 = "pncaden",
V9 = "cp",        V10 = "trestbps", V11 = "htn",      V12 = "chol",
V13 = "smoke",    V14 = "cigs",     V15 = "years",    V16 = "fbs",
V17 = "dm",       V18 = "famhist",  V19 = "restecg",  V20 = "ekgmo",
V21 = "ekgday",   V22 = "ekgyr",    V23 = "dig",      V24 = "prop",
V25 = "nitr",     V26 = "pro",      V27 = "diuretic", V28 = "proto",
V29 = "thaldur",  V30 = "thaltime", V31 = "met",      V32 = "thalac",
V33 = "thalrest", V34 = "tpeakbps", V35 = "tpeakbpd", V36 = "dummy",
V37 = "trestbpd", V38 = "exang",    V39 = "xhypo",    V40 = "oldpeak",
V41 = "slope",    V42 = "rldv5",    V43 = "rldv5e",   V44 = "ca",
V45 = "restckm2", V46 = "exerckm",  V47 = "restef",   V48 = "restwm",
V49 = "exeref",   V50 = "exerwm",   V51 = "thal",     V52 = "thalsev",
V53 = "thalpul",  V54 = "earlope",  V55 = "cmo",      V56 = "cday",
V57 = "cyr",      V58 = "num",      V59 = "lmt",      V60 = "ladprox",
V61 = "laddist",  V62 = "diag",     V63 = "cxmain",   V64 = "ramus",
V65 = "om1",      V66 = "om2",      V67 = "rcaprox",  V68 = "rcadist",
V69 = "lvx1",     V70 = "lvx2",     V71 = "lvx3",     V72 = "lvx4",
V73 = "lvf",      V74 = "cathef",   V75 = "junk",     V76 = "name")
read.table("switzerland.data", fileEncoding="UTF-16", dec=",")
read.table("switzerland.data")
shiny::runApp()
runApp()
